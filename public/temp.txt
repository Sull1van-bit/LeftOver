import React, { useState, useEffect } from 'react';
import { Home, Package, Tag, BarChart2, Megaphone, Settings, UserPlus, LogIn, ArrowRight, ShoppingCart, XCircle, RefreshCw, Truck } from 'lucide-react';

// Mock Data (Data tiruan untuk demonstrasi)
const mockData = {
  summary: {
    dailyRevenue: 1250000,
    newOrders: 15,
    productsSold: 45,
    storeViews: 1200,
  },
  recentOrders: [
    { id: 'ORD-2407-001', customer: 'Budi Santoso', total: 75000, status: 'Dikirim' },
    { id: 'ORD-2407-002', customer: 'Citra Lestari', total: 120000, status: 'Menunggu Diproses' },
    { id: 'ORD-2407-003', customer: 'Ahmad Yani', total: 55000, status: 'Selesai' },
    { id: 'ORD-2407-004', customer: 'Dewi Anggraini', total: 95000, status: 'Dikirim' },
  ],
  products: [
    { id: 'PROD-001', name: 'Roti Tawar Gandum Sisa Produksi', stock: 12, price: 15000, status: 'Aktif' },
    { id: 'PROD-002', name: 'Croissant Coklat (Kurang Sempurna)', stock: 8, price: 18000, status: 'Aktif' },
    { id: 'PROD-003', name: 'Donat Gula Klasik (Sisa Hari Ini)', stock: 25, price: 5000, status: 'Aktif' },
    { id: 'PROD-004', name: 'Kue Bolu Potongan', stock: 0, price: 10000, status: 'Habis' },
  ],
  promotions: [
    { id: 'PROMO-01', name: 'Diskon Kilat Akhir Hari', type: 'Diskon Persentase', value: '50%', status: 'Aktif' },
    { id: 'PROMO-02', name: 'Beli 1 Gratis 1 Roti', type: 'BOGO', value: 'N/A', status: 'Aktif' },
    { id: 'PROMO-03', name: 'Gratis Ongkir Weekend', type: 'Gratis Ongkir', value: 'Min. Belanja 50rb', status: 'Akan Datang' },
  ],
  dataCompass: {
    topProducts: [
      { name: 'Donat Gula Klasik', sold: 150 },
      { name: 'Roti Tawar Gandum', sold: 95 },
      { name: 'Croissant Coklat', sold: 70 },
    ],
    salesTrend: [1.2, 1.5, 1.3, 1.8, 2.1, 1.9, 2.5], // Data untuk 7 hari terakhir (dalam juta)
    trafficSource: [
        { source: 'Langsung', value: 40 },
        { source: 'Sosial Media', value: 35 },
        { source: 'Pencarian Organik', value: 25 },
    ]
  }
};

// Palet Warna
const colors = {
  darkGreen: '#123524',
  mediumGreen: '#3E7B27',
  lightGreen: '#85A947',
  cream: '#EFE3C2',
};

// Komponen untuk setiap kartu di Bento Grid
const BentoCard = ({ children, className = '' }) => (
  <div className={`bg-white/50 backdrop-blur-sm p-6 rounded-2xl shadow-md border border-white/20 transition-all duration-300 hover:shadow-lg hover:scale-[1.02] ${className}`}>
    {children}
  </div>
);

// Komponen Halaman Utama (Homepage)
const HomePage = () => {
  const formatCurrency = (value) => `Rp ${new Intl.NumberFormat('id-ID').format(value)}`;

  return (
    <div>
      <h1 className="text-3xl font-bold text-darkGreen mb-6">Selamat Datang Kembali!</h1>
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Ringkasan Kinerja */}
        <BentoCard className="lg:col-span-4">
          <h2 className="font-bold text-xl text-darkGreen mb-4">Ringkasan Kinerja Hari Ini</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div className="p-4 bg-cream/50 rounded-lg">
              <p className="text-sm text-mediumGreen">Pendapatan</p>
              <p className="text-2xl font-bold text-darkGreen">{formatCurrency(mockData.summary.dailyRevenue)}</p>
            </div>
            <div className="p-4 bg-cream/50 rounded-lg">
              <p className="text-sm text-mediumGreen">Pesanan Baru</p>
              <p className="text-2xl font-bold text-darkGreen">{mockData.summary.newOrders}</p>
            </div>
            <div className="p-4 bg-cream/50 rounded-lg">
              <p className="text-sm text-mediumGreen">Produk Terjual</p>
              <p className="text-2xl font-bold text-darkGreen">{mockData.summary.productsSold}</p>
            </div>
            <div className="p-4 bg-cream/50 rounded-lg">
              <p className="text-sm text-mediumGreen">Kunjungan Toko</p>
              <p className="text-2xl font-bold text-darkGreen">{mockData.summary.storeViews}</p>
            </div>
          </div>
        </BentoCard>

        {/* Pesanan Terbaru */}
        <BentoCard className="lg:col-span-2">
          <h2 className="font-bold text-xl text-darkGreen mb-4">Pesanan Terbaru</h2>
          <div className="space-y-3">
            {mockData.recentOrders.map(order => (
              <div key={order.id} className="flex justify-between items-center p-3 bg-cream/50 rounded-lg">
                <div>
                  <p className="font-semibold text-darkGreen">{order.id}</p>
                  <p className="text-sm text-mediumGreen">{order.customer}</p>
                </div>
                <div className="text-right">
                    <p className="font-semibold text-darkGreen">{formatCurrency(order.total)}</p>
                    <span className={`text-xs px-2 py-1 rounded-full ${order.status === 'Dikirim' ? 'bg-blue-200 text-blue-800' : order.status === 'Selesai' ? 'bg-green-200 text-green-800' : 'bg-yellow-200 text-yellow-800'}`}>{order.status}</span>
                </div>
              </div>
            ))}
          </div>
        </BentoCard>

        {/* Produk Terlaris */}
        <BentoCard className="lg:col-span-2">
          <h2 className="font-bold text-xl text-darkGreen mb-4">Produk Perlu Perhatian</h2>
          <div className="space-y-3">
            {mockData.products.filter(p => p.stock > 0 && p.stock < 15).map(product => (
              <div key={product.id} className="flex justify-between items-center p-3 bg-cream/50 rounded-lg">
                <div>
                  <p className="font-semibold text-darkGreen">{product.name}</p>
                </div>
                <p className="font-bold text-red-600">Sisa {product.stock}</p>
              </div>
            ))}
          </div>
        </BentoCard>
        
        {/* Aksi Cepat */}
        <BentoCard className="lg:col-span-4">
            <h2 className="font-bold text-xl text-darkGreen mb-4">Aksi Cepat</h2>
            <div className="flex flex-wrap gap-4">
                <button className="flex-1 min-w-[150px] bg-mediumGreen text-white font-bold py-3 px-4 rounded-lg flex items-center justify-center gap-2 hover:bg-lightGreen transition-colors">
                    <Tag size={20} /> Tambah Produk Baru
                </button>
                <button className="flex-1 min-w-[150px] bg-darkGreen text-white font-bold py-3 px-4 rounded-lg flex items-center justify-center gap-2 hover:bg-mediumGreen transition-colors">
                    <Megaphone size={20} /> Buat Promosi
                </button>
                 <button className="flex-1 min-w-[150px] bg-cream text-darkGreen font-bold py-3 px-4 rounded-lg flex items-center justify-center gap-2 hover:bg-opacity-80 transition-colors border border-darkGreen">
                    <BarChart2 size={20} /> Lihat Laporan Lengkap
                </button>
            </div>
        </BentoCard>
      </div>
    </div>
  );
};

// Komponen Halaman Pesanan (Orders)
const OrdersPage = () => {
    const [activeTab, setActiveTab] = useState('manage');

    const renderContent = () => {
        // Di aplikasi nyata, data akan difilter berdasarkan tab yang aktif
        let orders = mockData.recentOrders.concat([
            { id: 'ORD-2407-005', customer: 'Eka Wijaya', total: 25000, status: 'Dibatalkan' },
            { id: 'ORD-2407-006', customer: 'Fajar Nugraha', total: 210000, status: 'Pengembalian' },
        ]);

        switch(activeTab) {
            case 'cancellations':
                orders = orders.filter(o => o.status === 'Dibatalkan');
                break;
            case 'returns':
                orders = orders.filter(o => o.status === 'Pengembalian');
                break;
            case 'manage':
            default:
                orders = orders.filter(o => o.status !== 'Dibatalkan' && o.status !== 'Pengembalian');
        }

        if (activeTab === 'shipping') {
            return (
                <BentoCard>
                    <h3 className="font-bold text-xl text-darkGreen mb-4">Pengaturan Pengiriman</h3>
                    <div className="space-y-4">
                        <div>
                            <label className="block text-mediumGreen font-semibold mb-1">Opsi Kurir Instan</label>
                            <div className="flex items-center gap-4">
                                <input type="checkbox" id="gojek" className="h-4 w-4" defaultChecked />
                                <label htmlFor="gojek">GoSend</label>
                                <input type="checkbox" id="grab" className="h-4 w-4" defaultChecked />
                                <label htmlFor="grab">GrabExpress</label>
                            </div>
                        </div>
                        <div>
                            <label htmlFor="max-distance" className="block text-mediumGreen font-semibold mb-1">Jarak Maksimal Pengiriman (km)</label>
                            <input type="number" id="max-distance" defaultValue="10" className="w-full md:w-1/3 p-2 rounded-lg border border-lightGreen focus:ring-mediumGreen focus:border-mediumGreen" />
                        </div>
                        <div>
                            <label htmlFor="shipping-cost" className="block text-mediumGreen font-semibold mb-1">Biaya Pengiriman Flat (kosongkan untuk tarif otomatis)</label>
                            <input type="number" id="shipping-cost" placeholder="Contoh: 15000" className="w-full md:w-1/3 p-2 rounded-lg border border-lightGreen focus:ring-mediumGreen focus:border-mediumGreen" />
                        </div>
                    </div>
                </BentoCard>
            );
        }

        return (
            <BentoCard>
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead className="text-mediumGreen">
                            <tr>
                                <th className="p-3">ID Pesanan</th>
                                <th className="p-3">Pelanggan</th>
                                <th className="p-3">Total</th>
                                <th className="p-3">Status</th>
                                <th className="p-3">Aksi</th>
                            </tr>
                        </thead>
                        <tbody>
                            {orders.map(order => (
                                <tr key={order.id} className="border-t border-cream">
                                    <td className="p-3 font-semibold text-darkGreen">{order.id}</td>
                                    <td className="p-3 text-darkGreen">{order.customer}</td>
                                    <td className="p-3 text-darkGreen">Rp {new Intl.NumberFormat('id-ID').format(order.total)}</td>
                                    <td className="p-3">
                                        <span className={`text-xs px-2 py-1 rounded-full ${order.status === 'Dikirim' ? 'bg-blue-200 text-blue-800' : order.status === 'Selesai' ? 'bg-green-200 text-green-800' : order.status === 'Dibatalkan' ? 'bg-red-200 text-red-800' : order.status === 'Pengembalian' ? 'bg-purple-200 text-purple-800' : 'bg-yellow-200 text-yellow-800'}`}>{order.status}</span>
                                    </td>
                                    <td className="p-3">
                                        <button className="text-mediumGreen hover:text-lightGreen">Detail</button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </BentoCard>
        );
    };

    const TabButton = ({ id, label, icon }) => (
        <button
            onClick={() => setActiveTab(id)}
            className={`flex items-center gap-2 px-4 py-2 font-semibold rounded-t-lg transition-colors ${activeTab === id ? 'bg-white/50 text-darkGreen' : 'text-mediumGreen hover:bg-white/20'}`}
        >
            {icon} {label}
        </button>
    );

    return (
        <div>
            <h1 className="text-3xl font-bold text-darkGreen mb-6">Kelola Pesanan</h1>
            <div className="flex border-b-2 border-white/20 mb-6">
                <TabButton id="manage" label="Kelola Pesanan" icon={<ShoppingCart size={18} />} />
                <TabButton id="cancellations" label="Pembatalan" icon={<XCircle size={18} />} />
                <TabButton id="returns" label="Pengembalian" icon={<RefreshCw size={18} />} />
                <TabButton id="shipping" label="Pengaturan Pengiriman" icon={<Truck size={18} />} />
            </div>
            {renderContent()}
        </div>
    );
};

// Komponen Halaman Produk (Products)
const ProductsPage = () => {
    const [activeTab, setActiveTab] = useState('manage');

    const renderContent = () => {
        if (activeTab === 'settings') {
            return (
                <BentoCard>
                    <h3 className="font-bold text-xl text-darkGreen mb-4">Pengaturan Produk</h3>
                    <div className="space-y-4">
                        <div>
                            <label className="block text-mediumGreen font-semibold mb-1">Notifikasi Stok Rendah</label>
                            <div className="flex items-center gap-2">
                                <input type="checkbox" id="stock-notif" className="h-4 w-4" defaultChecked />
                                <label htmlFor="stock-notif">Aktifkan notifikasi jika stok kurang dari</label>
                                <input type="number" defaultValue="5" className="w-20 p-1 rounded-lg border border-lightGreen" />
                            </div>
                        </div>
                        <div>
                            <label className="block text-mediumGreen font-semibold mb-1">Tipe Produk Default</label>
                            <select className="p-2 rounded-lg border border-lightGreen bg-white">
                                <option>Roti</option>
                                <option>Kue</option>
                                <option>Minuman</option>
                                <option>Makanan Berat</option>
                            </select>
                        </div>
                    </div>
                </BentoCard>
            );
        }

        return (
            <BentoCard>
                 <div className="flex justify-between items-center mb-4">
                    <h3 className="font-bold text-xl text-darkGreen">Semua Produk</h3>
                    <button className="bg-mediumGreen text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2 hover:bg-lightGreen transition-colors">
                        <Tag size={16} /> Tambah Produk
                    </button>
                </div>
                <div className="overflow-x-auto">
                    <table className="w-full text-left">
                        <thead className="text-mediumGreen">
                            <tr>
                                <th className="p-3">Nama Produk</th>
                                <th className="p-3">Stok</th>
                                <th className="p-3">Harga</th>
                                <th className="p-3">Status</th>
                                <th className="p-3">Aksi</th>
                            </tr>
                        </thead>
                        <tbody>
                            {mockData.products.map(product => (
                                <tr key={product.id} className="border-t border-cream">
                                    <td className="p-3 font-semibold text-darkGreen">{product.name}</td>
                                    <td className="p-3 text-darkGreen">{product.stock}</td>
                                    <td className="p-3 text-darkGreen">Rp {new Intl.NumberFormat('id-ID').format(product.price)}</td>
                                    <td className="p-3">
                                        <span className={`text-xs px-2 py-1 rounded-full ${product.status === 'Aktif' ? 'bg-green-200 text-green-800' : 'bg-gray-200 text-gray-800'}`}>{product.status}</span>
                                    </td>
                                    <td className="p-3 space-x-2">
                                        <button className="text-mediumGreen hover:text-lightGreen">Ubah</button>
                                        <button className="text-red-600 hover:text-red-400">Hapus</button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </BentoCard>
        );
    };

    const TabButton = ({ id, label, icon }) => (
        <button
            onClick={() => setActiveTab(id)}
            className={`flex items-center gap-2 px-4 py-2 font-semibold rounded-t-lg transition-colors ${activeTab === id ? 'bg-white/50 text-darkGreen' : 'text-mediumGreen hover:bg-white/20'}`}
        >
            {icon} {label}
        </button>
    );

    return (
        <div>
            <h1 className="text-3xl font-bold text-darkGreen mb-6">Kelola Produk</h1>
            <div className="flex border-b-2 border-white/20 mb-6">
                <TabButton id="manage" label="Kelola Produk" icon={<Package size={18} />} />
                <TabButton id="settings" label="Pengaturan Produk" icon={<Settings size={18} />} />
            </div>
            {renderContent()}
        </div>
    );
};

// Komponen Halaman Marketing (Marketing)
const MarketingPage = () => {
    return (
        <div>
            <h1 className="text-3xl font-bold text-darkGreen mb-6">Pusat Pemasaran</h1>
            <BentoCard>
                <div className="flex justify-between items-center mb-4">
                    <h3 className="font-bold text-xl text-darkGreen">Promosi Aktif</h3>
                    <button className="bg-mediumGreen text-white font-bold py-2 px-4 rounded-lg flex items-center gap-2 hover:bg-lightGreen transition-colors">
                        <Megaphone size={16} /> Buat Promosi Baru
                    </button>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {mockData.promotions.map(promo => (
                        <div key={promo.id} className="p-4 bg-cream/50 rounded-lg border border-lightGreen">
                            <div className="flex justify-between items-start">
                                <h4 className="font-bold text-darkGreen">{promo.name}</h4>
                                <span className={`text-xs px-2 py-1 rounded-full ${promo.status === 'Aktif' ? 'bg-green-200 text-green-800' : 'bg-yellow-200 text-yellow-800'}`}>{promo.status}</span>
                            </div>
                            <p className="text-sm text-mediumGreen mt-1">{promo.type}</p>
                            <p className="text-lg font-bold text-darkGreen mt-2">{promo.value}</p>
                            <div className="mt-4 flex gap-2">
                                <button className="text-sm text-mediumGreen hover:text-lightGreen">Ubah</button>
                                <button className="text-sm text-red-600 hover:text-red-400">Hentikan</button>
                            </div>
                        </div>
                    ))}
                </div>
            </BentoCard>
        </div>
    );
};

// Komponen Halaman Data Compass
const DataCompassPage = () => {
    return (
        <div>
            <h1 className="text-3xl font-bold text-darkGreen mb-6">Kompas Data</h1>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <BentoCard className="lg:col-span-1">
                    <h2 className="font-bold text-xl text-darkGreen mb-4">Produk Terlaris (7 Hari)</h2>
                    <div className="space-y-2">
                        {mockData.dataCompass.topProducts.map((p, i) => (
                            <div key={i} className="flex justify-between items-center text-darkGreen">
                                <span>{i + 1}. {p.name}</span>
                                <span className="font-bold">{p.sold} terjual</span>
                            </div>
                        ))}
                    </div>
                </BentoCard>
                <BentoCard className="lg:col-span-2">
                    <h2 className="font-bold text-xl text-darkGreen mb-4">Tren Penjualan (7 Hari)</h2>
                    <div className="h-48 bg-cream/50 rounded-lg flex items-end justify-around p-2">
                        {mockData.dataCompass.salesTrend.map((val, i) => (
                            <div key={i} className="w-8 bg-mediumGreen hover:bg-lightGreen transition-all" style={{ height: `${(val / 3) * 100}%` }} title={`${val} Juta`}></div>
                        ))}
                    </div>
                </BentoCard>
                <BentoCard className="lg:col-span-3">
                    <h2 className="font-bold text-xl text-darkGreen mb-4">Sumber Kunjungan</h2>
                    <div className="flex flex-col md:flex-row gap-4">
                        <div className="w-full md:w-1/3">
                            {mockData.dataCompass.trafficSource.map((s, i) => (
                                <div key={i} className="flex justify-between items-center mb-2">
                                    <div className="flex items-center gap-2">
                                        <div className={`w-3 h-3 rounded-full ${i === 0 ? 'bg-darkGreen' : i === 1 ? 'bg-mediumGreen' : 'bg-lightGreen'}`}></div>
                                        <span className="text-darkGreen">{s.source}</span>
                                    </div>
                                    <span className="font-bold text-darkGreen">{s.value}%</span>
                                </div>
                            ))}
                        </div>
                        <div className="w-full md:w-2/3 h-10 flex rounded-full overflow-hidden">
                            <div className="bg-darkGreen" style={{width: `${mockData.dataCompass.trafficSource[0].value}%`}}></div>
                            <div className="bg-mediumGreen" style={{width: `${mockData.dataCompass.trafficSource[1].value}%`}}></div>
                            <div className="bg-lightGreen" style={{width: `${mockData.dataCompass.trafficSource[2].value}%`}}></div>
                        </div>
                    </div>
                </BentoCard>
            </div>
        </div>
    );
};


// Komponen Sidebar
const Sidebar = ({ currentPage, onNavigate, onLogout }) => {
  const NavItem = ({ page, icon, label }) => (
    <li
      onClick={() => onNavigate(page)}
      className={`flex items-center gap-3 p-3 mx-3 my-1 rounded-lg cursor-pointer transition-colors ${
        currentPage === page
          ? 'bg-lightGreen text-white'
          : 'text-cream hover:bg-white/20'
      }`}
    >
      {icon}
      <span className="font-semibold">{label}</span>
    </li>
  );

  return (
    <div className="w-64 bg-darkGreen text-white flex flex-col h-screen fixed">
      <div className="p-6 text-center">
        <h2 className="text-2xl font-bold text-cream">SisaRasa</h2>
        <p className="text-xs text-lightGreen">Seller Center</p>
      </div>
      <nav className="flex-grow">
        <ul>
          <NavItem page="home" icon={<Home size={20} />} label="Beranda" />
          <NavItem page="orders" icon={<ShoppingCart size={20} />} label="Pesanan" />
          <NavItem page="products" icon={<Package size={20} />} label="Produk" />
          <NavItem page="marketing" icon={<Megaphone size={20} />} label="Pemasaran" />
          <NavItem page="data" icon={<BarChart2 size={20} />} label="Kompas Data" />
        </ul>
      </nav>
      <div className="p-4">
        <button onClick={onLogout} className="w-full flex items-center justify-center gap-2 p-3 rounded-lg text-cream bg-red-600/50 hover:bg-red-600 transition-colors">
            <LogIn size={20} className="transform rotate-180"/>
            <span className="font-semibold">Keluar</span>
        </button>
      </div>
    </div>
  );
};

// Komponen Halaman Login/Registrasi
const AuthPage = ({ onLoginSuccess }) => {
    const [isRegister, setIsRegister] = useState(false);

    const FormInput = ({ id, type, label, placeholder }) => (
        <div>
            <label htmlFor={id} className="block mb-1 font-semibold text-mediumGreen">{label}</label>
            <input type={type} id={id} placeholder={placeholder} className="w-full p-3 bg-white/80 border border-lightGreen rounded-lg focus:ring-2 focus:ring-mediumGreen focus:border-transparent outline-none transition" />
        </div>
    );

    const handleSubmit = (e) => {
        e.preventDefault();
        // Di aplikasi nyata, akan ada validasi dan panggilan API
        onLoginSuccess();
    };

    return (
        <div className="min-h-screen w-full flex items-center justify-center bg-cream p-4" style={{
            backgroundImage: `radial-gradient(${colors.lightGreen} 1px, transparent 1px)`,
            backgroundSize: '20px 20px',
        }}>
            <div className="w-full max-w-md bg-white/50 backdrop-blur-lg rounded-2xl shadow-2xl p-8 border border-white/30">
                <h2 className="text-3xl font-bold text-center text-darkGreen mb-2">
                    {isRegister ? 'Buat Akun Baru' : 'Selamat Datang'}
                </h2>
                <p className="text-center text-mediumGreen mb-8">
                    {isRegister ? 'Mulai perjalanan Anda untuk menyelamatkan makanan.' : 'Masuk ke dasbor penjual Anda.'}
                </p>

                <form className="space-y-4" onSubmit={handleSubmit}>
                    {isRegister && (
                        <>
                            <FormInput id="fullName" type="text" label="Nama Lengkap" placeholder="John Doe" />
                            <FormInput id="email" type="email" label="Email" placeholder="anda@email.com" />
                            <FormInput id="storeName" type="text" label="Nama Toko" placeholder="Toko Roti Enak" />
                            <FormInput id="location" type="text" label="Lokasi Toko" placeholder="Jl. Merdeka No. 10, Jakarta" />
                            <div>
                                <label htmlFor="status" className="block mb-1 font-semibold text-mediumGreen">Jenis Produk Utama</label>
                                <select id="status" className="w-full p-3 bg-white/80 border border-lightGreen rounded-lg focus:ring-2 focus:ring-mediumGreen focus:border-transparent outline-none transition">
                                    <option>Roti & Kue</option>
                                    <option>Makanan Siap Saji</option>
                                    <option>Buah & Sayur</option>
                                    <option>Lainnya</option>
                                </select>
                            </div>
                        </>
                    )}
                    <FormInput id="username" type="text" label="Username" placeholder="tokoroti_enak" />
                    <FormInput id="password" type="password" label="Password" placeholder="••••••••" />
                    
                    <button type="submit" className="w-full bg-mediumGreen text-white font-bold py-3 rounded-lg hover:bg-darkGreen transition-all duration-300 flex items-center justify-center gap-2 group">
                        {isRegister ? 'Daftar' : 'Masuk'}
                        <ArrowRight className="w-5 h-5 transition-transform group-hover:translate-x-1" />
                    </button>
                </form>

                <p className="text-center text-sm text-mediumGreen mt-6">
                    {isRegister ? 'Sudah punya akun?' : 'Belum punya akun?'}
                    <button onClick={() => setIsRegister(!isRegister)} className="font-bold text-darkGreen hover:underline ml-1">
                        {isRegister ? 'Masuk di sini' : 'Daftar sekarang'}
                    </button>
                </p>
            </div>
        </div>
    );
}


// Komponen Utama Aplikasi
export default function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [currentPage, setCurrentPage] = useState('home');

  const handleLoginSuccess = () => setIsAuthenticated(true);
  const handleLogout = () => setIsAuthenticated(false);
  const handleNavigate = (page) => setCurrentPage(page);

  const renderCurrentPage = () => {
    switch (currentPage) {
      case 'home':
        return <HomePage />;
      case 'orders':
        return <OrdersPage />;
      case 'products':
        return <ProductsPage />;
      case 'marketing':
        return <MarketingPage />;
      case 'data':
        return <DataCompassPage />;
      default:
        return <HomePage />;
    }
  };

  if (!isAuthenticated) {
    return <AuthPage onLoginSuccess={handleLoginSuccess} />;
  }

  return (
    <div className="flex bg-cream" style={{
        backgroundImage: `radial-gradient(${colors.lightGreen} 0.5px, transparent 0.5px)`,
        backgroundSize: '15px 15px',
    }}>
      <Sidebar currentPage={currentPage} onNavigate={handleNavigate} onLogout={handleLogout} />
      <main className="flex-grow p-8 ml-64 min-h-screen">
        {renderCurrentPage()}
      </main>
    </div>
  );
}
